{"version":3,"sources":["../src/points.js"],"names":["_","DistinctPoints","name","changes","legendInfo","last","asc","ts","val","start","ms","push","console","log","length","ctrl","reverse","range","to","transitionCount","valToInfo","lastTS","legendCount","maxLegendSize","panel","legendMaxValues","i","pt","s","e","from","has","v","count","elapsed","forEach","value","per","distinctValuesCount","size","isTimeline","orderBy"],"mappings":"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","file":"points.js","sourcesContent":["import _ from \"lodash\";\n\nexport class DistinctPoints {\n\n  constructor(name) {\n    this.name = name;\n    this.changes = [];\n    this.legendInfo = [];\n\n    // last point we added\n    this.last = null;\n    this.asc = false;\n  }\n\n  // ts numeric ms,\n  // val is the normalized value\n  add(ts, val) {\n    if(this.last == null) {\n      this.last = {\n        val: val,\n        start: ts,\n        ms: 0\n      };\n      this.changes.push(this.last);\n    } else if(ts == this.last.ts) {\n      console.log('skip point with duplicate timestamp', ts, val);\n      return;\n    } else {\n      if(this.changes.length === 1) {\n        this.asc = ts > this.last.start;\n      }\n      if((ts > this.last.start) != this.asc) {\n        console.log('skip out of order point', ts, val);\n        return;\n      }\n\n      // Same value\n      if(val == this.last.val) {\n        if(!this.asc) {\n          this.last.start = ts;\n        }\n      } else {\n        this.last = {\n          val: val,\n          start: ts,\n          ms: 0\n        };\n        this.changes.push(this.last);\n      }\n    }\n  }\n\n  finish(ctrl) {\n    if(this.changes.length<1) {\n      console.log( \"no points found!\" );\n      return;\n    }\n\n    if(!this.asc) {\n      this.last = this.changes[0];\n      _.reverse(this.changes);\n    }\n\n    // Add a point beyond the controls\n    if(this.last.start < ctrl.range.to) {\n      this.changes.push( {\n        val: this.last.val,\n        start: ctrl.range.to+1,\n        ms: 0\n      });\n    }\n\n    this.transitionCount = 0;\n    var valToInfo = {};\n    var lastTS = 0;\n    var legendCount = 0;\n    var maxLegendSize = ctrl.panel.legendMaxValues;\n    if(!maxLegendSize) {\n      maxLegendSize = 20;\n    }\n    var last = this.changes[0];\n    for(var i = 1; i < this.changes.length; i++) {\n      var pt = this.changes[i];\n\n      var s = last.start;\n      var e = pt.start;\n      if(s < ctrl.range.from) {\n        s = ctrl.range.from;\n      } else if(s < ctrl.range.to) {\n        this.transitionCount++;\n      }\n\n      if(e > ctrl.range.to) {\n        e = ctrl.range.to;\n      }\n\n      last.ms = e - s;\n      if(last.ms > 0) {\n        if(_.has(valToInfo, last.val)) {\n          var v = valToInfo[last.val];\n          v.ms += last.ms;\n          v.count++;\n        } else {\n          valToInfo[last.val] = { 'val': last.val, 'ms': last.ms, 'count': 1 };\n          legendCount++;\n        }\n      }\n      last = pt;\n    }\n\n    var elapsed = ctrl.range.to - ctrl.range.from;\n    this.elapsed = elapsed;\n\n    _.forEach(valToInfo, value => {\n      value.per = (value.ms/elapsed);\n      this.legendInfo.push( value );\n    });\n    this.distinctValuesCount = _.size(this.legendInfo);\n\n\n    if(!ctrl.isTimeline) {\n      this.legendInfo = _.orderBy(this.legendInfo, ['ms'], ['desc']);\n    }\n    //console.log( \"FINISH\", this );\n  }\n}\n"]}